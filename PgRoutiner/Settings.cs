using System;
using System.Collections;
using System.Collections.Generic;

namespace PgRoutiner
{
    public class Settings
    {
        public string Connection { get; set; }
        public string Project { get; set; }
        public string OutputDir { get; set; } = "";
        public string Schema { get; set; } = "public";
        public bool Overwrite { get; set; } = false;
        public string Namespace { get; set; }
        public string NotSimilarTo { get; set; } = null;
        public string SimilarTo { get; set; } = null;
        public string SourceHeader { get; set; } = "// <auto-generated at {0} />";
        public bool SyncMethod { get; set; } = true;
        public bool AsyncMethod { get; set; } = true;
        public string ModelDir { get; set; } = null;
        public IDictionary<string, string> Mapping { get; set; }
        public IDictionary<string, string> CustomModels { get; set; }
        public IList<string> SkipIfExists { get; set; }
        public bool UseRecordsForModels { get; set; } = false;

        public static Settings Value { get; set; } = new Settings();
        public static IDictionary<string, string> TypeMapping { get; set; } = new Dictionary<string, string>
        {
            {"text", "string"},
            {"bpchar", "string"},
            {"xml", "string"},
            {"inet", "string"},
            {"daterange", "TimeSpan"},
            {"float8", "double"},
            {"bool", "bool"},
            {"int2", "short"},
            {"timestamptz", "DateTime"},
            {"int8", "long"},
            {"timetz", "DateTime"},
            {"time", "DateTime"},
            {"char", "string"},
            {"date", "DateTime"},
            {"numeric", "decimal"},
            {"varchar", "string"},
            {"jsonb", "string"},
            {"float4", "float"},
            {"json", "string"},
            {"int4", "int"}
        };

        public static void MergeTypes(Settings settings)
        {
            if (settings.Mapping == null)
            {
                return;
            }

            foreach (var (key, value) in settings.Mapping)
            {
                TypeMapping[key] = value;
            }
        }
    }
}
